class Book:
    """ Базовый класс книги. """
    def __init__(self, name: str, author: str):
        self._name = name
        self._author = author
    @property
    def author(self) -> str:
        return self._author
    @property
    def name(self) -> str:
        return self._name


    def __str__(self):
        return f"Книга {self.name}. Автор: {self.author}"

    def __repr__(self):
        return f"{self.__class__.__name__}(name = {self.name!r}, author = {self.author!r})"


class PaperBook(Book):
    def __init__(self, name: str, author: str, pages: int):
        super().__init__(name, author)
        if not isinstance(pages, (int)):
            raise TypeError("Число страниц должно быть целым числом")
        if pages <= 0:
            raise ValueError("Число страниц не может быть меньше или равным нулю")
        self._pages = pages
    @property
    def pages(self) -> int:
        return self._pages
    @pages.setter
    def pages(self, new_pages: int):
        if not isinstance(new_pages, int):
            raise TypeError("Количество страниц должно быть типа int")
        if new_pages <= 0:
            raise ValueError("Количество страниц должно быть положительным числом")
        self._pages = new_pages


    def __repr__(self):
        return f"{self.__class__.__name__}(name = {self.name!r}, author = {self.author!r}, pages = {self.pages!r})"


class AudioBook(Book):
    def __init__(self, name: str, author: str, duration: float):
        super().__init__(name, author)
        if not isinstance(duration, (int, float)):
            raise TypeError("Длительность аудиокниги должна быть целым или дробным числом")
        if duration <= 0:
            raise ValueError("Длителтность аудиокниги не может быть меньше или равной нулю")
        self._duration = duration
    @property
    def duration(self) -> (int, float):
        return self._duration
    @duration.setter
    def duration(self, new_duration: (int, float)):
        if not isinstance(new_duration, (int, float)):
            raise TypeError("Длительность аудиокниги должна быть целым или дробным числом")
        if new_duration <= 0:
            raise ValueError("Длителтность аудиокниги не может быть меньше или равной нулю")
        self._duration = new_duration


    def __repr__(self):
        return f"{self.__class__.__name__}(name = {self.name!r}, author = {self.author!r}, duration = {self.duration!r})"

Book_1 = AudioBook("12", "MV", 57)
print(str(Book_1))
